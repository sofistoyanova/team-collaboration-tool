{"ast":null,"code":"export const userSignupValidation = formData => {\n  // validate length\n  // validate email\n  // validate password if match and lengh, if contains at least one letter\n  // return messgae\n  formData = Object.fromEntries(formData.entries());\n  let status = {};\n  const {\n    firstName,\n    lastName,\n    email,\n    password,\n    confirmedPassword\n  } = formData;\n  console.log('validation', formData);\n  const emailPattern = /^\\S+@\\S+\\.\\S+$/;\n  const emailPatternMatch = email.match(emailPattern);\n\n  if (firstName.trim().length < 2 || lastName.trim().length < 2) {\n    return status = {\n      code: 400,\n      message: 'First/Last name should contains at least 2 characters.'\n    };\n  }\n\n  if (!emailPatternMatch) {\n    return status = {\n      code: 400,\n      message: 'Email is not in correct format.'\n    };\n  }\n\n  if (password.length < 7) {\n    return status = {\n      code: 400,\n      message: 'Password should contains at least 7characters.'\n    };\n  }\n\n  if (password != confirmedPassword) {\n    return status = {\n      code: 400,\n      message: 'Passwords do not match.'\n    };\n  }\n\n  return status = {\n    code: 200,\n    message: 'Successfully registered!'\n  };\n};\nexport const userLoginValidation = formData => {\n  const {\n    email,\n    password\n  } = formData;\n  const emailPattern = /^\\S+@\\S+\\.\\S+$/;\n  const emailPatternMatch = email.match(emailPattern);\n  let status = {};\n\n  if (!email || !password) {\n    return status = {\n      code: 400,\n      message: 'Please fill in all user details'\n    };\n  }\n\n  if (!emailPatternMatch) {\n    return status = {\n      code: 400,\n      message: 'PEmail is invalid format'\n    };\n  }\n\n  return status = {\n    code: 200,\n    message: ''\n  };\n};","map":{"version":3,"sources":["/home/sofi/Coding/task-managment-system/client/src/helpers/formValidation.js"],"names":["userSignupValidation","formData","Object","fromEntries","entries","status","firstName","lastName","email","password","confirmedPassword","console","log","emailPattern","emailPatternMatch","match","trim","length","code","message","userLoginValidation"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAIC,QAAD,IAAc;AAC9C;AACA;AACA;AACA;AACAA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,WAAP,CAAmBF,QAAQ,CAACG,OAAT,EAAnB,CAAX;AAEA,MAAIC,MAAM,GAAG,EAAb;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,KAAvB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA;AAAxC,MAA8DT,QAApE;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BX,QAA1B;AACA,QAAMY,YAAY,GAAG,gBAArB;AACA,QAAMC,iBAAiB,GAAGN,KAAK,CAACO,KAAN,CAAYF,YAAZ,CAA1B;;AAEA,MAAGP,SAAS,CAACU,IAAV,GAAiBC,MAAjB,GAA0B,CAA1B,IAA+BV,QAAQ,CAACS,IAAT,GAAgBC,MAAhB,GAAyB,CAA3D,EAA8D;AAC1D,WAAOZ,MAAM,GAAG;AACZa,MAAAA,IAAI,EAAE,GADM;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAhB;AAIH;;AAED,MAAG,CAACL,iBAAJ,EAAuB;AACnB,WAAOT,MAAM,GAAG;AACZa,MAAAA,IAAI,EAAE,GADM;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAhB;AAIH;;AAED,MAAGV,QAAQ,CAACQ,MAAT,GAAkB,CAArB,EAAwB;AACpB,WAAOZ,MAAM,GAAG;AACZa,MAAAA,IAAI,EAAE,GADM;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAhB;AAIH;;AAED,MAAGV,QAAQ,IAAIC,iBAAf,EAAkC;AAC9B,WAAOL,MAAM,GAAG;AACZa,MAAAA,IAAI,EAAE,GADM;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAhB;AAIH;;AACD,SAAOd,MAAM,GAAG;AACZa,IAAAA,IAAI,EAAE,GADM;AAEZC,IAAAA,OAAO,EAAE;AAFG,GAAhB;AAIH,CA5CM;AA8CP,OAAO,MAAMC,mBAAmB,GAAInB,QAAD,IAAc;AAC7C,QAAM;AAAEO,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBR,QAA7B;AACA,QAAMY,YAAY,GAAG,gBAArB;AACA,QAAMC,iBAAiB,GAAGN,KAAK,CAACO,KAAN,CAAYF,YAAZ,CAA1B;AACA,MAAIR,MAAM,GAAG,EAAb;;AAEA,MAAG,CAACG,KAAD,IAAU,CAACC,QAAd,EAAwB;AACpB,WAAOJ,MAAM,GAAG;AACZa,MAAAA,IAAI,EAAE,GADM;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAhB;AAIH;;AAED,MAAG,CAACL,iBAAJ,EAAuB;AACnB,WAAOT,MAAM,GAAG;AACZa,MAAAA,IAAI,EAAE,GADM;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAhB;AAIH;;AAED,SAAOd,MAAM,GAAG;AACZa,IAAAA,IAAI,EAAE,GADM;AAEZC,IAAAA,OAAO,EAAE;AAFG,GAAhB;AAIH,CAxBM","sourcesContent":["export const userSignupValidation = (formData) => {\n    // validate length\n    // validate email\n    // validate password if match and lengh, if contains at least one letter\n    // return messgae\n    formData = Object.fromEntries(formData.entries())\n\n    let status = {}\n    const { firstName, lastName, email, password, confirmedPassword } = formData\n    console.log('validation', formData)\n    const emailPattern = /^\\S+@\\S+\\.\\S+$/\n    const emailPatternMatch = email.match(emailPattern)\n\n    if(firstName.trim().length < 2 || lastName.trim().length < 2) {\n        return status = {\n            code: 400,\n            message: 'First/Last name should contains at least 2 characters.'\n        }\n    }\n\n    if(!emailPatternMatch) {\n        return status = {\n            code: 400,\n            message: 'Email is not in correct format.'\n        }\n    }\n\n    if(password.length < 7) {\n        return status = {\n            code: 400,\n            message: 'Password should contains at least 7characters.'\n        }\n    }\n\n    if(password != confirmedPassword) {\n        return status = {\n            code: 400,\n            message: 'Passwords do not match.'\n        }\n    }\n    return status = {\n        code: 200,\n        message: 'Successfully registered!'\n    }\n}\n\nexport const userLoginValidation = (formData) => {\n    const { email, password } =  formData\n    const emailPattern = /^\\S+@\\S+\\.\\S+$/\n    const emailPatternMatch = email.match(emailPattern)\n    let status = {}\n\n    if(!email || !password) {\n        return status = {\n            code: 400,\n            message: 'Please fill in all user details'\n        }\n    }\n\n    if(!emailPatternMatch) {\n        return status = {\n            code: 400,\n            message: 'PEmail is invalid format'\n        }\n    }\n\n    return status = {\n        code: 200,\n        message: ''\n    }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/sofi/Coding/task-managment-system/client/src/pages/Notifications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nconst {\n  getMethod,\n  postMethod\n} = require('../helpers/request');\n\nconst Notifications = () => {\n  _s();\n\n  const [errorMessage, setErrorMessage] = useState('');\n  const [invtitations, setInvitations] = useState('');\n  useEffect(async () => {\n    const getInvitationsRequest = await getMethod('/api/users/invitations');\n    const getInvitationsRequestData = getInvitationsRequest.data;\n    const getInvitationsRequestStatus = getInvitationsRequestData.status;\n\n    if (getInvitationsRequestStatus != 200) {\n      setErrorMessage('There was an error retrieving all invtiations, plese try again later');\n    } //const invtitations = getInvitationsRequestData.message\n\n\n    setInvitations(getInvitationsRequestData.message);\n    console.log(invtitations);\n  }, []);\n\n  const sendAnswer = (event, organizationId, action) => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Notifications:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"invitations\",\n      children: invtitations.map(organization => {\n        const organizationName = organization.name;\n        const organizationId = organization._id;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: organizationId,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: organizationName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: event => {\n              sendAnswer(event, organizationId, 'accept');\n            },\n            children: \"accept\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: event => {\n              sendAnswer(event, organizationId, 'decline');\n            },\n            children: \"decline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Notifications, \"AN03OWjH1CxqtNean4rGdwC/p7Q=\");\n\n_c = Notifications;\nexport default Notifications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"sources":["/home/sofi/Coding/task-managment-system/client/src/pages/Notifications.js"],"names":["React","useState","useEffect","getMethod","postMethod","require","Notifications","errorMessage","setErrorMessage","invtitations","setInvitations","getInvitationsRequest","getInvitationsRequestData","data","getInvitationsRequestStatus","status","message","console","log","sendAnswer","event","organizationId","action","preventDefault","map","organization","organizationName","name","_id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AACA,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAA4BC,OAAO,CAAC,oBAAD,CAAzC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAAEC,YAAF,EAAgBC,eAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAAEQ,YAAF,EAAgBC,cAAhB,IAAmCT,QAAQ,CAAC,EAAD,CAAjD;AAEAC,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAMS,qBAAqB,GAAG,MAAMR,SAAS,CAAC,wBAAD,CAA7C;AACA,UAAMS,yBAAyB,GAAGD,qBAAqB,CAACE,IAAxD;AACA,UAAMC,2BAA2B,GAAGF,yBAAyB,CAACG,MAA9D;;AAEA,QAAGD,2BAA2B,IAAI,GAAlC,EAAuC;AACnCN,MAAAA,eAAe,CAAC,sEAAD,CAAf;AACH,KAPiB,CASlB;;;AACAE,IAAAA,cAAc,CAACE,yBAAyB,CAACI,OAA3B,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,YAAZ;AACH,GAZQ,EAYN,EAZM,CAAT;;AAgBA,QAAMU,UAAU,GAAG,CAACC,KAAD,EAAQC,cAAR,EAAwBC,MAAxB,KAAmC;AAClDF,IAAAA,KAAK,CAACG,cAAN;AAEH,GAHD;;AAKA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA,gBAEQd,YAAY,CAACe,GAAb,CAAiBC,YAAY,IAAI;AAC7B,cAAMC,gBAAgB,GAAGD,YAAY,CAACE,IAAtC;AACA,cAAMN,cAAc,GAAEI,YAAY,CAACG,GAAnC;AAEA,4BACI;AAAK,UAAA,EAAE,EAAEP,cAAT;AAAA,kCACI;AAAA,sBAAIK;AAAJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,OAAO,EAAGN,KAAD,IAAW;AAACD,cAAAA,UAAU,CAACC,KAAD,EAAQC,cAAR,EAAwB,QAAxB,CAAV;AAA4C,aAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,OAAO,EAAGD,KAAD,IAAW;AAACD,cAAAA,UAAU,CAACC,KAAD,EAAQC,cAAR,EAAwB,SAAxB,CAAV;AAA6C,aAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAOH,OAXD;AAFR;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CA9CD;;GAAMf,a;;KAAAA,a;AAgDN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nconst { getMethod, postMethod } = require('../helpers/request')\n\nconst Notifications = () => {\n    const [ errorMessage, setErrorMessage ] = useState('')\n    const [ invtitations, setInvitations ] = useState('')\n\n    useEffect(async () => {\n        const getInvitationsRequest = await getMethod('/api/users/invitations')\n        const getInvitationsRequestData = getInvitationsRequest.data\n        const getInvitationsRequestStatus = getInvitationsRequestData.status\n        \n        if(getInvitationsRequestStatus != 200) {\n            setErrorMessage('There was an error retrieving all invtiations, plese try again later')\n        }\n\n        //const invtitations = getInvitationsRequestData.message\n        setInvitations(getInvitationsRequestData.message)\n        console.log(invtitations)\n    }, [])\n\n  \n\n    const sendAnswer = (event, organizationId, action) => {\n        event.preventDefault()\n        \n    }\n\n    return (\n        <div>\n            <h1>Your Notifications:</h1>\n            <div id=\"invitations\">\n                {\n                    invtitations.map(organization => {\n                        const organizationName = organization.name\n                        const organizationId= organization._id\n\n                        return (\n                            <div id={organizationId}>\n                                <p>{organizationName}</p>\n                                <button onClick={(event) => {sendAnswer(event, organizationId, 'accept')}}>accept</button>\n                                <button onClick={(event) => {sendAnswer(event, organizationId, 'decline')}}>decline</button>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Notifications"]},"metadata":{},"sourceType":"module"}